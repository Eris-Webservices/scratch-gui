version: 2.1
orbs:
    browser-tools: circleci/browser-tools@1.2.4
aliases:
  - &save_git_cache
    save_cache:
      paths:
        - .git
      key: v3-git-{{ .Revision }}
  - &restore_git_cache
    restore_cache:
      keys:
        - v3-git-{{ .Revision }}
        - v3-git-
  - &save_build_cache
    save_cache:
      paths:
        - build
      key: v3-build-{{ .Revision }}
  - &restore_build_cache
    restore_cache:
      keys:
        - v3-build-{{ .Revision }}
  - &save_dist_cache
    save_cache:
      paths:
        - dist
      key: v3-dist-{{ .Revision }}
  - &restore_dist_cache
    restore_cache:
      keys:
        - v3-dist-{{ .Revision }}
  - &save_npm_cache
    save_cache:
      paths:
        - node_modules
      key: v3-npm-{{ checksum "package-lock.json" }}
  - &restore_npm_cache
    restore_cache:
      keys:
        - v3-npm-{{ checksum "package-lock.json" }}
        - v3-npm-
  - &defaults
    docker:
      - image: cimg/node:12.22.11-browsers
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    working_directory: ~/repo

jobs:
  build-test-no-cache:
    <<: *defaults
    environment:
      JEST_JUNIT_OUTPUT_DIR: test-results
      NODE_OPTIONS: --max-old-space-size=4000
    steps:
      - *restore_git_cache
      - checkout
      - run: npm ci
      - run:
          name: Unit
          environment:
            JEST_JUNIT_OUTPUT_NAME: unit-results.xml
          command: npm run test:unit -- --reporters="default" --reporters="jest-junit" --coverage --coverageReporters=text --coverageReporters=lcov --maxWorkers="2"
      - run:
          name: Build
          environment:
            NODE_ENV: production
          command: npm run build
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - store_artifacts:
          path: coverage
      - store_test_results:
          path: test-results
  setup:
    <<: *defaults
    steps:
      - *restore_git_cache
      - checkout
      - run: npm ci
      - *save_git_cache
      - *save_npm_cache
  build:
    <<: *defaults
    environment:
      NODE_ENV: production
      NODE_OPTIONS: --max-old-space-size=4000
    steps:
      - *restore_git_cache
      - checkout
      - *restore_npm_cache
      - run:
          name: Build
          command: npm run build
      - *save_build_cache
      - *save_dist_cache
  store_build:
    <<: *defaults
    steps:
      - *restore_build_cache
      - store_artifacts:
          path: build
  store_dist:
    <<: *defaults
    steps:
      - *restore_dist_cache
      - store_artifacts:
          path: dist
  
  deploy-gh-pages:
    <<: *defaults
    steps:
      - *restore_git_cache
      - checkout
      - *restore_npm_cache
      - *restore_build_cache
      - run: |
          git config --global user.email $(git log --pretty=format:"%ae" -n1)
          git config --global user.name $(git log --pretty=format:"%an" -n1)
      - run: npm run deploy 
  push-translations:
    <<: *defaults
    steps:
      - *restore_git_cache
      - checkout
      - *restore_npm_cache
      - run: npm run i18n:src
      - run: npm run i18n:push

workflows:
  version: 2
  push-translations:
    triggers:
      - schedule:
          cron: 0 0 * * * # daily at 12 UTC, 8 ET
          filters:
            branches:
              only:
                - develop
    jobs:
      - setup:
          context:
            - dockerhub-credentials
      - push-translations:
          context:
            - dockerhub-credentials
          requires:
              - setup

  build-test-no-deploy:
    jobs:
      - build-test-no-cache:
          context:
            - dockerhub-credentials
          filters:
            branches:
              ignore:
                - master
                - develop
                - /^hotfix\/.*/
  build-test-deploy:
    jobs:
      - setup:
          context:
            - dockerhub-credentials
          filters:
            branches:
              only:
                - master
                - develop
                - /^hotfix\/.*/
      - build:
          context:
            - dockerhub-credentials
          requires:
            - setup
      - store_build:
          context:
            - dockerhub-credentials
          requires:
            - build
          filters:
            branches:
              only:
                - master
                - develop
                - /^hotfix\/.*/
      - store_dist:
          context:
            - dockerhub-credentials
          requires:
            - build
          filters:
            branches:
              only:
                - master
                - develop
                - /^hotfix\/.*/
      - deploy-gh-pages:
          context:
            - dockerhub-credentials
          requires:
            - build
          filters:
            branches:
              ignore:
                - /^dependabot/.*/
                - /^renovate/.*/
                - /^pull/.*/ # don't deploy to  gh pages on PRs.
